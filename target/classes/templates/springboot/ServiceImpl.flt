package ${serviceImplPackage};

import com.github.pagehelper.PageHelper;
import com.google.common.base.Joiner;
import ${servicePackage}.${table.name}Service;
import ${mapperPackage}.${table.name}Mapper;
import ${modelPackage}.${table.name};
import ${voPackage}.${table.name}VO;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Condition;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;


/*
 * @author ${author}
 * @email: ${email}
 * @date: ${dateTime}
 * @Description ${table.srcName} ${table.comment} 业务接口实现
 * @version ${version}
 */
@Service
public class ${table.name}ServiceImpl extends ServiceImpl<${table.name}> implements ${table.name}Service {

    @Resource
    private ${table.name}Mapper ${table.name?uncap_first}Mapper;

    @Override
    public ${table.name}VO selectById(Serializable id) {
        return this.convert(this.selectByPrimaryKey(id));
    }

    @Override
    public List<${table.name}VO> selectList(Integer pageNum, Integer pageSize, Condition condition) {
        PageHelper.startPage(pageNum, pageSize);
        return this.${table.name?uncap_first}Mapper.selectByCondition(condition)
                .stream()
                .map(this::convert)
                .collect(Collectors.toList());
    }

    @Override
    public List<${table.name}VO> selectByIds(Collection<Serializable> ids) {
        return this.${table.name?uncap_first}Mapper.selectByIds(Joiner.on(",").join(ids))
                .stream()
                .map(this::convert)
                .collect(Collectors.toList());
    }

    @Override
    public void insert(${table.name}VO ${table.name?uncap_first}VO) {
        this.${table.name?uncap_first}Mapper.insert(this.convert(${table.name?uncap_first}VO));
    }

    @Override
    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
    public void insertList(Collection<${table.name}VO> ${table.name?uncap_first}VOList) {
        List<${table.name}> systemLogList = ${table.name?uncap_first}VOList.stream()
                .map(this::convert)
                .collect(Collectors.toList());
        this.${table.name?uncap_first}Mapper.insertBatch(systemLogList);
    }

    @Override
    public void update(${table.name}VO ${table.name?uncap_first}VO) {
        this.${table.name?uncap_first}Mapper.updateByPrimaryKey(this.convert(${table.name?uncap_first}VO));
    }

    @Override
    public Integer deleteById(Serializable id) {
        return this.${table.name?uncap_first}Mapper.deleteByIds(String.valueOf(id));
    }

    @Override
    @Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
    public void deleteByIds(Collection<Serializable> ids) {
        this.${table.name?uncap_first}Mapper.deleteByIds(Joiner.on(",").join(ids));
    }


    @Override
    public ${table.name} convert(${table.name}VO ${table.name?uncap_first}VO) {
        ${table.name} ${table.name?uncap_first} = new ${table.name}();
        BeanUtils.copyProperties(${table.name?uncap_first}VO, ${table.name?uncap_first});
        return ${table.name?uncap_first};
    }

    @Override
    public ${table.name}VO convert(${table.name} ${table.name?uncap_first}) {
        ${table.name}VO ${table.name?uncap_first}VO = new ${table.name}VO();
        BeanUtils.copyProperties(${table.name?uncap_first}, ${table.name?uncap_first}VO);
        return ${table.name?uncap_first}VO;
    }
}
